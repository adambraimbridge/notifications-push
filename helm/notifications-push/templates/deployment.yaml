{{- if .Values.eksCluster }}
apiVersion: apps/v1
{{- else }}
apiVersion: extensions/v1beta1
{{- end }}
kind: Deployment
metadata:
  name: {{ .Values.service.name }}
  labels:
    chart: "{{ .Chart.Name | trunc 63 }}"
    chartVersion: "{{ .Chart.Version | trunc 63 }}"
    visualize: "true"
    app: {{ .Values.service.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.service.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.service.name }}
        visualize: "true"
    spec:
      affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Values.service.name }}
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: {{ .Values.service.name }}
        image: "{{ .Values.image.repository }}:{{ .Chart.Version }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: KAFKA_ADDRS
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: zookeeper.url
        - name: API_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: api.host.with.protocol
        - name: GROUP_ID
          # set this as the pod name so it's unique per instance
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: TOPIC
          value: {{ .Values.env.TOPIC }}
        - name: METADATA_TOPIC
          value: {{ .Values.env.METADATA_TOPIC }}
        - name: NOTIFICATIONS_DELAY
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: cache-max-age
        - name: CONSUMER_BACKOFF
          value: "{{ .Values.env.CONSUMER_BACKOFF }}"
        - name: NOTIFICATIONS_RESOURCE
          value: {{ .Values.env.NOTIFICATIONS_RESOURCE }}
        - name: CONTENT_URI_WHITELIST
          value: {{ .Values.env.CONTENT_URI_WHITELIST }}
        - name: CONTENT_TYPE_WHITELIST
          value: {{ .Values.env.CONTENT_TYPE_WHITELIST }}
        - name: WHITELISTED_METADATA_ORIGIN_SYSTEM_HEADERS
          value: {{ .Values.env.WHITELISTED_METADATA_ORIGIN_SYSTEM_HEADERS }}
        ports:
        - containerPort: 8080
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
        readinessProbe:
          httpGet:
            path: "/__gtg"
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 30
          timeoutSeconds: 5
        resources:
{{ toYaml .Values.resources | indent 12 }}

